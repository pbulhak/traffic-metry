[project]
name = "trafficmetry"
version = "0.1.0"
description = "A system for monitoring and analyzing local street traffic using AI"
readme = "README.md"
license = {text = "CC BY-NC-SA 4.0"}
authors = [
    {name = "Piotr Bułhak"}
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "opencv-python>=4.8.0",
    "ultralytics>=8.0.0",  # Includes native ByteTrack tracking
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "websockets>=12.0",
    "python-multipart>=0.0.6",
    # supervision REMOVED - using Ultralytics native tracking instead
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
]

[project.scripts]
dev = "scripts.dev_server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["backend"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "SIM"]
ignore = ["E501"]

[tool.ruff.lint.per-file-ignores]
"backend/api_models.py" = ["N815"] # Ignoruj N815 tylko w tym pliku (API v2.3 camelCase contract)

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

# Kluczowa opcja, która rozwiąże nasz problem:
allow_untyped_globals = false
allow_redefinition = false
implicit_reexport = false
strict_equality = true
disallow_any_generics = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v"

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "ruff>=0.12.10",
]
